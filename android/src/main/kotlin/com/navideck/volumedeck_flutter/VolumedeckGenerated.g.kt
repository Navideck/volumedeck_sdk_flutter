// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.navideck.volumedeck_flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAndroidConfig (
  val showStopButtonInNotification: Boolean? = null,
  val notificationTitle: String? = null,
  val notificationSubtitle: String? = null,
  val notificationStopButtonText: String? = null,
  val notificationIconDrawable: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAndroidConfig {
      val showStopButtonInNotification = list[0] as Boolean?
      val notificationTitle = list[1] as String?
      val notificationSubtitle = list[2] as String?
      val notificationStopButtonText = list[3] as String?
      val notificationIconDrawable = list[4] as String?
      return NativeAndroidConfig(showStopButtonInNotification, notificationTitle, notificationSubtitle, notificationStopButtonText, notificationIconDrawable)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      showStopButtonInNotification,
      notificationTitle,
      notificationSubtitle,
      notificationStopButtonText,
      notificationIconDrawable,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object VolumedeckChannelCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAndroidConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAndroidConfig -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * Volumedeck
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface VolumedeckChannel {
  fun initialize(autoStart: Boolean, runInBackground: Boolean, nativeAndroidConfig: NativeAndroidConfig?, androidActivationKey: String?, iOSActivationKey: String?)
  fun start()
  fun stop()
  fun setMockSpeed(speed: Long)

  companion object {
    /** The codec used by VolumedeckChannel. */
    val codec: MessageCodec<Any?> by lazy {
      VolumedeckChannelCodec
    }
    /** Sets up an instance of `VolumedeckChannel` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: VolumedeckChannel?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.volumedeck_flutter.VolumedeckChannel.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val autoStartArg = args[0] as Boolean
            val runInBackgroundArg = args[1] as Boolean
            val nativeAndroidConfigArg = args[2] as NativeAndroidConfig?
            val androidActivationKeyArg = args[3] as String?
            val iOSActivationKeyArg = args[4] as String?
            var wrapped: List<Any?>
            try {
              api.initialize(autoStartArg, runInBackgroundArg, nativeAndroidConfigArg, androidActivationKeyArg, iOSActivationKeyArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.volumedeck_flutter.VolumedeckChannel.start", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.start()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.volumedeck_flutter.VolumedeckChannel.stop", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stop()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.volumedeck_flutter.VolumedeckChannel.setMockSpeed", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val speedArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.setMockSpeed(speedArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class VolumedeckCallback(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by VolumedeckCallback. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onLocationStatusChange(statusArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.volumedeck_flutter.VolumedeckCallback.onLocationStatusChange", codec)
    channel.send(listOf(statusArg)) {
      callback()
    }
  }
  fun onLocationUpdate(speedArg: Double, volumeArg: Double, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.volumedeck_flutter.VolumedeckCallback.onLocationUpdate", codec)
    channel.send(listOf(speedArg, volumeArg)) {
      callback()
    }
  }
  fun onStart(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.volumedeck_flutter.VolumedeckCallback.onStart", codec)
    channel.send(null) {
      callback()
    }
  }
  fun onStop(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.volumedeck_flutter.VolumedeckCallback.onStop", codec)
    channel.send(null) {
      callback()
    }
  }
}
